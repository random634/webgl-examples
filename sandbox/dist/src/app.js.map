{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./sandbox/js/core/node.js","webpack:///./sandbox/js/core/material.js","webpack:///./sandbox/js/core/sprite.js","webpack:///./sandbox/js/core/camera.js","webpack:///./sandbox/js/core/game.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Node","gl","_classCallCheck","this","_baseMat4","mat4","create","modelViewMatrix","translate","x","y","width","height","w","h","scale","rotation","Material","vs","fs","vsShader","getShader","VERTEX_SHADER","fsShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","error","getProgramInfoLog","detachShader","deleteShader","useProgram","script","type","output","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","Sprite","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","material","aVertexPosLoc","getAttribLocation","aTextureCoordLoc","uSamplerLoc","getUniformLocation","uModelViewMatrixLoc","uProjectionMatrixLoc","vertexPosBuffer","createBuffer","_setupVertexPosBuffer","textureCoordBuffer","_setupTextureCoordBuffer","indexBuffer","_setupIndexBuffer","texture","createTexture","_setupTexture","bindBuffer","ARRAY_BUFFER","positions","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","image","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","bindTexture","TEXTURE_2D","pixel","Uint8Array","texImage2D","_isPowerOf2","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","projectionMatrix","FLOAT","vertexAttribPointer","enableVertexAttribArray","activeTexture","TEXTURE0","uniform1i","uniformMatrix4fv","UNSIGNED_SHORT","drawElements","TRIANGLES","_get","spriteFrame","_node","Camera","boundX","canvas","clientWidth","boundY","clientHeight","ortho","paras","Math","PI","window","renderLoop","timeStamp","arguments","length","undefined","game","Game","update","requestAnimationFrame","vsSource","fsSource","canvasElm","document","createElement","getContext","clearColor","body","appendChild","camera","sprite1","sprite2","setSize","setPosition","image1","Image","src","onload","setSpriteFrame","image2","timeElapse","timeStampLast","dt","posX","viewport","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","render","ONE","flush"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/**\n * 节点\n * @func 管理节点的缩放，旋转，平移\n */\n\nclass Node {\n  constructor(gl) {\n    this.gl = gl;\n\n    // Set the drawing position to the \"identity\" point, which is\n    // the center of the scene.\n    this._baseMat4 = mat4.create();\n\n    this.modelViewMatrix = mat4.create();\n    // Now move the drawing position a bit to where we want to\n    // start drawing the square.\n\n    mat4.translate(\n      this.modelViewMatrix, // destination matrix\n      this._baseMat4,       // matrix to translate\n      [-0.0, 0.0, -6.0]);   // amount to translate\n    \n    this.x = 0;\n    this.y = 0;\n    this.width = 100;\n    this.height = 100;\n  }\n\n  setSize(w, h) {\n    this.width = w;\n    this.height = h;\n  }\n\n  setScale(scale) {\n\n  }\n\n  setRotation(rotation) {\n    // 2d is angle, 3d is euler angle\n  }\n\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n    mat4.translate(this.modelViewMatrix, this._baseMat4, [x, y, -6.0]);\n  }\n}\n\nexport default Node;\n","/**\n * 材质\n * @func 提供渲染功能\n */\n\nclass Material {\n  constructor(gl, vs, fs) {\n    this.gl = gl;\n\n    let vsShader = this.getShader(vs, gl.VERTEX_SHADER);\n    let fsShader = this.getShader(fs, gl.FRAGMENT_SHADER);\n\n    if (vsShader && fsShader) {\n      this.program = gl.createProgram();\n      gl.attachShader(this.program, vsShader);\n      gl.attachShader(this.program, fsShader);\n      gl.linkProgram(this.program);\n\n      if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n        console.error(\"Cannot load shader: \\n\" + gl.getProgramInfoLog(this.program));\n        return null;\n      }\n\n      gl.detachShader(this.program, vsShader);\n      gl.detachShader(this.program, fsShader);\n      gl.deleteShader(vsShader);\n      gl.deleteShader(fsShader);\n\n      gl.useProgram(null);\n    }\n  }\n\n  getShader(script, type) {\n    let gl = this.gl;\n    var output = gl.createShader(type);\n    gl.shaderSource(output, script);\n    gl.compileShader(output);\n\n    if (!gl.getShaderParameter(output, gl.COMPILE_STATUS)) {\n      console.error(\"Shader error: \\n\" + gl.getShaderInfoLog(output));\n      return null;\n    }\n\n    return output;\n  }\n}\n\nexport default Material;\n","/**\n * 精灵(2d)\n * @func 控制精灵的渲染\n */\n\nimport Node from './node'\nimport Material from './material'\n \nclass Sprite extends Node {\n  constructor(gl, vs, fs) {\n    super(gl);\n\n    this.material = new Material(gl, vs, fs);\n\n    // Init shader location\n    this.aVertexPosLoc = gl.getAttribLocation(this.material.program, \"aVertexPos\");\n    this.aTextureCoordLoc = gl.getAttribLocation(this.material.program, \"aTextureCoord\");\n\n    this.uSamplerLoc = gl.getUniformLocation(this.material.program, \"uSampler\");\n    this.uModelViewMatrixLoc = gl.getUniformLocation(this.material.program, \"uModelViewMatrix\");\n    this.uProjectionMatrixLoc = gl.getUniformLocation(this.material.program, \"uProjectionMatrix\");\n\n    // Create a buffer for the square's positions.\n    this.vertexPosBuffer = gl.createBuffer();\n    this._setupVertexPosBuffer(this.width, this.height);\n\n    // Create a buffer for the texture coordinates.\n    this.textureCoordBuffer = gl.createBuffer();\n    this._setupTextureCoordBuffer();\n\n    // Create the element array buffer; this specifies the indices\n    // into the vertex arrays for each face's vertices.\n    this.indexBuffer = gl.createBuffer();\n    this._setupIndexBuffer();\n\n    // Create texture for the sprite.\n    this.texture = gl.createTexture();\n    this._setupTexture();\n  }\n\n  _setupVertexPosBuffer(w, h) {\n    let gl = this.gl;\n\n    // Select the vertexPosBuffer as the one to apply buffer\n    // operations to from here out.\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPosBuffer);\n\n    // Now create an array of positions for the square.\n    // x from left to right\n    // y from bottom to top\n    let positions = [\n      -0.5 * w, -0.5 * h,\n      -0.5 * w, 0.5 * h,\n      0.5 * w, 0.5 * h,\n      0.5 * w, -0.5 * h,\n    ];\n\n    // Now pass the list of positions into WebGL to build the\n    // shape. We do this by creating a Float32Array from the\n    // JavaScript array, then use it to fill the current buffer.\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n  }\n\n  _setupTextureCoordBuffer() {\n    let gl = this.gl;\n\n    // Now set up the texture coordinates for the faces.\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordBuffer);\n\n    // x from left to right\n    // y from top to bottom\n    let textureCoordinates = [\n      0.0, 1.0,\n      0.0, 0.0,\n      1.0, 0.0,\n      1.0, 1.0,\n    ];\n\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\n  }\n\n  _setupIndexBuffer() {\n    let gl = this.gl;\n\n    // Build the element array buffer; this specifies the indices\n    // into the vertex arrays for each face's vertices.\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    // This array defines each face as two triangles, using the\n    // indices into the vertex array to specify each triangle's\n    // position.\n    let indices = [\n      0, 1, 2, 0, 2, 3,\n    ];\n\n    // Now send the element array to GL\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n  }\n\n  _setupTexture(image) {\n    let gl = this.gl;\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const srcFormat = gl.RGBA;\n    const srcType = gl.UNSIGNED_BYTE;\n\n    if (image == null) {\n      gl.bindTexture(gl.TEXTURE_2D, this.texture);\n\n      // Because images have to be download over the internet\n      // they might take a moment until they are ready.\n      // Until then put a single pixel in the texture so we can\n      // use it immediately. When the image has finished downloading\n      // we'll update the texture with the contents of the image.\n      const width = 1;\n      const height = 1;\n      const border = 0;\n      const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n        width, height, border, srcFormat, srcType,\n        pixel);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, this.texture);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n        srcFormat, srcType, image);\n\n      // WebGL1 has different requirements for power of 2 images\n      // vs non power of 2 images so check if the image is a\n      // power of 2 in both dimensions.\n      if (this._isPowerOf2(image.width) && this._isPowerOf2(image.height)) {\n        // Yes, it's a power of 2. Generate mips.\n        gl.generateMipmap(gl.TEXTURE_2D);\n      } else {\n        // No, it's not a power of 2. Turn of mips and set\n        // wrapping to clamp to edge\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      }\n    }\n  }\n\n  _isPowerOf2(value) {\n    return (value & (value - 1)) == 0;\n  }\n\n  render(projectionMatrix) {\n    let gl = this.gl;\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n      const numComponents = 2;\n      const type = gl.FLOAT;\n      const normalize = false;\n      const stride = 0;\n      const offset = 0;\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPosBuffer);\n      gl.vertexAttribPointer(\n        this.aVertexPosLoc,\n        numComponents,\n        type,\n        normalize,\n        stride,\n        offset);\n      gl.enableVertexAttribArray(this.aVertexPosLoc);\n    }\n\n    // Tell WebGL how to pull out the texture coordinates from\n    // the texture coordinate buffer into the textureCoord attribute.\n    {\n      const numComponents = 2;\n      const type = gl.FLOAT;\n      const normalize = false;\n      const stride = 0;\n      const offset = 0;\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordBuffer);\n      gl.vertexAttribPointer(\n        this.aTextureCoordLoc,\n        numComponents,\n        type,\n        normalize,\n        stride,\n        offset);\n      gl.enableVertexAttribArray(this.aTextureCoordLoc);\n    }\n\n    // Tell WebGL which indices to use to index the vertices\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    // before set the shader uniforms must use program\n    gl.useProgram(this.material.program);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.uniform1i(this.uSamplerLoc, 0);\n\n    gl.uniformMatrix4fv(this.uModelViewMatrixLoc, false, this.modelViewMatrix);\n    gl.uniformMatrix4fv(this.uProjectionMatrixLoc, false, projectionMatrix);\n\n    {\n      const vertexCount = 6;\n      const type = gl.UNSIGNED_SHORT;\n      const offset = 0;\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\n    }\n\n    // {\n    //   const offset = 0;\n    //   const vertexCount = 4;\n    //   gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\n    // }\n\n    gl.useProgram(null);\n  }\n\n  setSize(w, h) {\n    super.setSize(w, h)\n    this._setupVertexPosBuffer(this.width, this.height);\n  }\n\n  setSpriteFrame(spriteFrame) {\n    this._setupTexture(spriteFrame);\n  }\n}\n\nexport default Sprite;\n","/**\n * 相机\n * @func 设置相机属性（透视相机，正交相机）\n */\n\nimport Node from './node.js'\n\nclass Camera extends Node {\n  constructor(gl) {\n    super(gl);\n\n    this.projectionMatrix = mat4.create();\n\n    // default create a ortho camera\n    const boundX = [-0.5 * gl.canvas.clientWidth, 0.5 * gl.canvas.clientWidth]\n    const boundY = [-0.5 * gl.canvas.clientHeight, 0.5 * gl.canvas.clientHeight]\n    mat4.ortho(this.projectionMatrix, boundX[0], boundX[1], boundY[0], boundY[1], 0.1, 100);\n  }\n\n  changeCamera(type, paras) {\n    // Create a perspective matrix, a special matrix that is\n    // used to simulate the distortion of perspective in a camera.\n    // Our field of view is 45 degrees, with a width/height\n    // ratio that matches the display size of the canvas\n    // and we only want to see objects between 0.1 units\n    // and 100 units away from the camera.\n\n    const fieldOfView = 45 * Math.PI / 180;   // in radians\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n    const zNear = 0.1;\n    const zFar = 100.0;\n    const projectionMatrix = mat4.create();\n\n    // note: glmatrix.js always has the first argument\n    // as the destination to receive the result.\n    // mat4.perspective(projectionMatrix,\n    //                  fieldOfView,\n    //                  aspect,\n    //                  zNear,\n    //                  zFar);\n  }\n}\n\nexport default Camera;\n","\nfunction renderLoop(timeStamp, init = false) {\n  if (init === true) {\n    window.game = new Game();\n  } else {\n    window.game.update(timeStamp);\n  }\n\n  requestAnimationFrame(renderLoop);\n}\n\nwindow.renderLoop = renderLoop;\n\n// Vertex shader program\nconst vsSource = `\nattribute vec4 aVertexPos;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying highp vec2 vTextureCoord;\n\nvoid main() {\n  gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPos;\n  vTextureCoord = aTextureCoord;\n}\n`;\n\n// Fragment shader program\nconst fsSource = `\n// precision mediump float;\n\nvarying highp vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main() {\n  // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n  gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n`;\n\nimport Camera from './camera'\nimport Sprite from './sprite'\n\nclass Game {\n  constructor() {\n    this.canvasElm = document.createElement(\"canvas\");\n    this.canvasElm.width = 800;\n    this.canvasElm.height = 600;\n\n    this.gl = this.canvasElm.getContext(\"webgl2\");\n    this.gl.clearColor(0.4, 0.6, 1.0, 0.0);\n\n    document.body.appendChild(this.canvasElm);\n\n    // let vs = document.getElementById(\"vs_01\").innerHTML;\n    // let fs = document.getElementById(\"fs_01\").innerHTML;\n\n    this.camera = new Camera(this.gl)\n\n    this.sprite1 = new Sprite(this.gl, vsSource, fsSource);\n    this.sprite2 = new Sprite(this.gl, vsSource, fsSource);\n\n    this.sprite1.setSize(360, 360);\n    this.sprite2.setSize(460, 460);\n\n    this.sprite1.setPosition(0, 150)\n    this.sprite2.setPosition(0, -150)\n\n    let image1 = new Image();\n    image1.src = 'res/img1.png';\n    image1.onload = () => {\n      this.sprite1.setSpriteFrame(image1);\n    }\n\n    let image2 = new Image();\n    image2.src = 'res/img2.png';\n    image2.onload = () => {\n      this.sprite2.setSpriteFrame(image2);\n    }\n\n    this.timeElapse = 0;\n    this.timeStampLast = -1;\n  }\n\n  update(timeStamp) {\n    // TODO: 生成精灵帧，控制精灵帧缩放，旋转，平移\n    let dt = 0;\n    if (this.timeStampLast >= 0) {\n      dt = (timeStamp - this.timeStampLast) / 1000;\n      this.timeStampLast = timeStamp;\n    } else {\n      this.timeStampLast = timeStamp;\n    }\n\n    this.timeElapse += dt;\n    if (this.timeElapse > 2) {\n      this.timeElapse = 0;\n    }\n\n    let posX = 200 * this.timeElapse;\n    this.sprite1.setPosition(posX, this.sprite1.y)\n    this.sprite2.setPosition(-posX, this.sprite2.y)\n\n    this.gl.viewport(0, 0, this.canvasElm.width, this.canvasElm.height);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    this.gl.enable(this.gl.BLEND);\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n    this.sprite1.render(this.camera.projectionMatrix);\n\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n    this.sprite2.render(this.camera.projectionMatrix);\n\n    this.gl.flush();\n  }\n}\n"],"sourceRoot":""}